/*
  shiftOut với 8 LED bằng 1 IC HC595
*/
//chân ST_CP của 74HC595
int latchPin = 8;
//chân SH_CP của 74HC595
int clockPin = 12;
//Chân DS của 74HC595
int dataPin = 11;
//9,14,8,12,1,7,2,5
//13,3,4,10,6,11,15,16
const int HC595_COUNT = 2;//Số lượng 595 mắc nối tiếp
byte ledStatus[HC595_COUNT] = {0, 0};
void setup() {
  //Bạn BUỘC PHẢI pinMode các chân này là OUTPUT
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);
}

void fillValueToArray(byte value) {
  for (int i = 0; i < HC595_COUNT; i += 1) {
    ledStatus[i] = value;
  }
}

void shiftOutHC595(int dataPin, int clockPin, byte ledStatus[]) {
  digitalWrite(latchPin, LOW);

  for (int i = 0; i < HC595_COUNT; i++) {
    shiftOut(dataPin, clockPin, MSBFIRST, ledStatus[i]);
  }

  digitalWrite(latchPin, HIGH);
}

void drawImage(byte data[]) {
  fillValueToArray(0);
  //int row[] = {1, 2, 4, 8, 16, 32, 64, 128};
   int row[] = {128, 64, 32, 16, 8, 4, 2, 1};

  for (int i = 0 ; i < 8; i++) {
    ledStatus[0] = ~data[i];
    ledStatus[1] = row[i];
    shiftOutHC595(dataPin, clockPin, ledStatus);
  }
}


const byte IMAGES[][8] = {
{
  B00000000,
  B00000001,
  B00000001,
  B00000001,
  B00000001,
  B00000001,
  B00000000,
  B00000000
},{
  B00000000,
  B00000011,
  B00000011,
  B00000011,
  B00000011,
  B00000011,
  B00000001,
  B00000000
},{
  B00000000,
  B00000110,
  B00000110,
  B00000110,
  B00000110,
  B00000110,
  B00000011,
  B00000001
},{
  B00000000,
  B00001100,
  B00001100,
  B00001100,
  B00001100,
  B00001100,
  B00000111,
  B00000011
},{
  B00000000,
  B00011001,
  B00011001,
  B00011001,
  B00011001,
  B00011001,
  B00001111,
  B00000110
},{
  B00000000,
  B00110011,
  B00110011,
  B00110011,
  B00110011,
  B00110011,
  B00011110,
  B00001100
},{
  B00000000,
  B01100110,
  B01100110,
  B01100110,
  B01100110,
  B01100110,
  B00111100,
  B00011000
},{
  B00000000,
  B11001101,
  B11001100,
  B11001100,
  B11001100,
  B11001100,
  B01111000,
  B00110001
},{
  B00000000,
  B10011011,
  B10011001,
  B10011001,
  B10011001,
  B10011001,
  B11110001,
  B01100011
},{
  B00000000,
  B00110111,
  B00110011,
  B00110011,
  B00110011,
  B00110011,
  B11100011,
  B11000111
},{
  B00000000,
  B01101111,
  B01100110,
  B01100110,
  B01100110,
  B01100110,
  B11000110,
  B10001111
},{
  B00000000,
  B11011110,
  B11001100,
  B11001100,
  B11001100,
  B11001100,
  B10001100,
  B00011110
},{
  B00000000,
  B10111101,
  B10011001,
  B10011001,
  B10011001,
  B10011001,
  B00011001,
  B00111101
},{
  B00000000,
  B01111011,
  B00110011,
  B00110011,
  B00110011,
  B00110011,
  B00110011,
  B01111011
},{
  B00000000,
  B11110111,
  B01100110,
  B01100110,
  B01100111,
  B01100110,
  B01100110,
  B11110111
},{
  B00000000,
  B11101111,
  B11001100,
  B11001100,
  B11001111,
  B11001100,
  B11001100,
  B11101111
},{
  B00000000,
  B11011111,
  B10011000,
  B10011000,
  B10011111,
  B10011000,
  B10011000,
  B11011111
},{
  B00000000,
  B10111111,
  B00110000,
  B00110000,
  B00111110,
  B00110000,
  B00110000,
  B10111111
},{
  B00000000,
  B01111110,
  B01100000,
  B01100000,
  B01111100,
  B01100000,
  B01100000,
  B01111110
},{
  B00000000,
  B11111101,
  B11000001,
  B11000001,
  B11111001,
  B11000001,
  B11000001,
  B11111101
},{
  B00000000,
  B11111011,
  B10000011,
  B10000011,
  B11110011,
  B10000011,
  B10000011,
  B11111011
},{
  B00000000,
  B11110110,
  B00000111,
  B00000111,
  B11100110,
  B00000110,
  B00000110,
  B11110110
},{
  B00000000,
  B11101100,
  B00001110,
  B00001111,
  B11001101,
  B00001100,
  B00001100,
  B11101100

},{
  B00000000,
  B11011000,
  B00011100,
  B00011110,
  B10011011,
  B00011001,
  B00011000,
  B11011000
},{
  B00000000,
  B10110001,
  B00111001,
  B00111101,
  B00110111,
  B00110011,
  B00110001,
  B10110001
},{
  B00000000,
  B01100011,
  B01110011,
  B01111011,
  B01101111,
  B01100111,
  B01100011,
  B01100011
},{
  B00000000,
  B11000110,
  B11100110,
  B11110110,
  B11011110,
  B11001110,
  B11000110,
  B11000110
},{
  B00000000,
  B10001100,
  B11001100,
  B11101100,
  B10111100,
  B10011100,
  B10001100,
  B10001100
},{
  B00000000,
  B00011000,
  B10011000,
  B11011000,
  B01111000,
  B00111000,
  B00011000,
  B00011000
},{
  B00000000,
  B00110000,
  B00110000,
  B10110000,
  B11110000,
  B01110000,
  B00110000,
  B00110000
},{
  B00000000,
  B01100000,
  B01100000,
  B01100000,
  B11100000,
  B11100000,
  B01100000,
  B01100000
},{
  B00000000,
  B11000000,
  B11000000,
  B11000000,
  B11000000,
  B11000000,
  B11000000,
  B11000000
},{
  B00000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000,
  B10000000
}};

const int IMAGES_LEN = sizeof(IMAGES)/8;


int size = sizeof(IMAGES) / 8;
int i = 0;

void loop() {
  for (int loop = 0; loop < 300; loop ++ ) {
    drawImage(IMAGES[i]);
  }
  if (++i >= size) {
    i = 0;
  }
}
